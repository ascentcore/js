{"version":3,"sources":["../../src/components/form-element.js","../../src/ui-schema.ts","../../src/components/text-element.js","../../src/components/numeric-element.js","../../src/components/select-element.js","../../src/components/checkbox-element.js","../../src/components/form-container.js","../../src/element-wrapper.js","../../src/component-registry.js","../../src/schema-form.js","basic-schema/index.js","webpack:///./src/basic-schema/index.js?a1dc","nested-schema/index.js","webpack:///./src/nested-schema/index.js?123e","custom-wrapper/index.js","webpack:///./src/custom-wrapper/index.js?91e7","custom-registry/index.js","webpack:///./src/custom-registry/index.js?2071","App.js","index.js"],"names":["FormElement","registry","useState","useEffect","def","$ref","root","properties","subSchema","processRef","items","setNest","handleChange","evt","value","handleParentChange","handleRemove","index","newVal","path","schema","data","errors","parentChange","copy","subVal","itemValue","key","renderItem","item","onClick","children","registryKey","property","isRequired","nest","pathKey","subschema","renderSubschema","renderRegistryElement","arrayItems","renderArray","UISchema","constructor","jsonSchema","this","Object","allErrors","ajv","compile","validator","TextElement","onChange","type","NumericElement","parseInt","parseFloat","SelectElement","opts","labelKey","valueKey","setOptions","defaultValue","disabled","options","opt","CheckboxElement","FormContainer","ElementWrapper","wrapperClass","className","customRegistry","wrapper","enum","component","boolean","number","integer","string","customRegistryRecord","props","Component","_registry","Wrapper","SchemaForm","parentErrors","Error","config","newValue","setObj","setErrors","getErrors","result","errArr","err","keys","childPath","prop","error","obj","instance","onValid","BasicSchemaExample","console","log","firstName","NestedSchemaExample","field","name","fields","CustomWrapper","title","style","keyword","CustomWrapperExample","CustomTextField","TextField","label","helperText","required","CustomRegistryExample","App","window","location","hash","substr","selected","setSelected","tabs","code","BasicSchemaExampleJSON","NestedSchemaExampleJSON","CustomWrapperExampleJSON","CustomRegistryExampleJSON","map","tab","idx","href","data-lang","src","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ee2eaec4.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react'\nimport { SchemaForm } from '../schema-form'\n\nexport default function FormElement({\n    root,\n    property,\n    path,\n    value,\n    errors,\n    error,\n    handleParentChange,\n    registry\n}) {\n    const [nest, setNest] = useState(null)\n\n    useEffect(() => {\n        function processRef($ref) {\n            const def = $ref.substr($ref.lastIndexOf('/') + 1)\n            return root.definitions[def]\n        }\n\n        const { $ref, items, properties } = property\n        let subSchema\n\n        if ($ref) {\n            subSchema = processRef($ref)\n        } else if (items) {\n            if (items.$ref) {\n                subSchema = processRef(items.$ref)\n            } else if (items.properties) {\n                subSchema = items\n            }\n        }\n\n        if (!subSchema && properties) {\n            subSchema = property\n        }\n\n        if (subSchema) {\n            setNest(subSchema)\n        }\n    }, [property])\n\n    const handleChange = (evt) => {\n        let value = evt\n        if (evt.target) {\n            value = evt.target.value\n        }\n        handleParentChange(value, path)\n    }\n\n    const handleRemove = (index) => () => {\n        const newVal = [...value]\n        newVal.splice(index, 1)\n        handleParentChange(newVal, path)\n    }\n\n    function renderSubschema(pathKey, itemValue, index) {\n        return (\n            <SchemaForm\n                path={pathKey}\n                schema={nest}\n                data={itemValue}\n                errors={errors}\n                parentChange={(subVal, key) => {\n                    if (index !== null) {\n                        const copy = [...value]\n                        copy[index] = subVal\n                        handleParentChange(copy, key)\n                    } else {\n                        handleParentChange(subVal, key)\n                    }\n                }}\n            />\n        )\n    }\n\n    function renderArray(itemValue) {\n        return (\n            <Fragment>\n                {itemValue &&\n                    itemValue.map((item, index) => (\n                        <Fragment key={`${path}-${index}`}>\n                            {renderItem(item, index)}\n                            <button onClick={handleRemove(index)}>\n                                remove item\n                            </button>\n                        </Fragment>\n                    ))}\n                <button\n                    onClick={() => {\n                        handleParentChange([...(itemValue || []), {}])\n                    }}\n                >\n                    add item\n                </button>\n            </Fragment>\n        )\n    }\n\n    function renderRegistryElement(itemValue, children = null) {\n        const registryKey =\n            property.enum || property.options ? 'enum' : property.type\n        const key = path.substr(path.lastIndexOf('.') + 1)\n        const isRequired = root.required && root.required.indexOf(key) > -1\n\n        return registry.getComponent(\n            {\n                ...property,\n                path,\n                registryKey,\n                error,\n                isRequired,\n                children\n            },\n            itemValue,\n            handleChange\n        )\n    }\n\n    function renderItem(itemValue, index = null) {\n        if (\n            (nest && property.type !== 'array') ||\n            (nest && property.type === 'array' && index !== null)\n        ) {\n            const pathKey = index === null ? path : `${path}[${index}]`\n            const subschema = renderSubschema(pathKey, itemValue, index)\n\n            return renderRegistryElement(itemValue, subschema)\n        } else if (nest && property.type === 'array') {\n            const arrayItems = renderArray(itemValue)\n\n            return renderRegistryElement(itemValue, arrayItems)\n        } else {\n            return renderRegistryElement(itemValue)\n        }\n    }\n    return renderItem(value)\n}\n","import Ajv, { ValidateFunction } from 'ajv'\n\nexport default class UISchema {\n    schema: any\n    keys: string[]\n    ajv: any\n    validator: ValidateFunction\n    constructor(jsonSchema: any) {\n        this.schema = { ...jsonSchema }\n        this.keys = Object.keys(this.schema.properties)\n        this.ajv = new Ajv({ allErrors: true })\n        this.validator = this.ajv.compile(this.schema)\n    }\n\n    validate(data: any): boolean | PromiseLike<any> {\n        return this.validator(data)\n    }\n}\n","import React from 'react'\n\nexport default function TextElement({ value, onChange }) {\n    return <input type='text' value={value} onChange={onChange} />\n}\n","import React from 'react'\n\nexport default function NumericElement({ property, value, onChange }) {\n    const handleChange = (evt) => {\n        const { type } = property\n        const { value } = evt.target\n        if (type === 'integer') {\n            onChange(parseInt(value))\n        } else {\n            onChange(parseFloat(value))\n        }\n    }\n\n    return <input type='number' value={value} onChange={handleChange} />\n}\n","import React, { useEffect, useState } from 'react'\n\nexport default function SelectElement({ property, value, onChange }) {\n    const [options, setOptions] = useState([])\n    let [labelKey, valueKey] = [\n        property.labelKey || 'labelKey',\n        property.valueKey || 'valueKey'\n    ]\n    useEffect(() => {\n        let opts = property.options\n        if (property.enum) {\n            opts = property.enum.map((item) => ({\n                labelKey: item,\n                valueKey: item\n            }))\n        } else {\n            labelKey = property.labelKey || labelKey\n            valueKey = property.valueKey || valueKey\n        }\n        setOptions(opts)\n    }, [property])\n\n    return (\n        <select onChange={onChange} value={value} defaultValue=''>\n            {!value && (\n                <option value='' disabled>\n                    Select your option\n                </option>\n            )}\n            {options.map((opt) => (\n                <option key={opt[labelKey]} value={opt[valueKey]}>\n                    {opt[labelKey]}\n                </option>\n            ))}\n        </select>\n    )\n}\n","import React from 'react'\n\nexport default function CheckboxElement({ property, value, onChange }) {\n    const handleChange = (evt) => {\n        onChange(evt.target.checked)\n    }\n\n    return <input type='checkbox' value={value} onChange={handleChange} />\n}\n","import React, { Fragment } from 'react'\n\nexport default function FormContainer({ property }) {\n    return <Fragment>{property.children}</Fragment>\n}\n","import React from 'react'\n\nexport default function ElementWrapper({ children, property }) {\n    const { type } = property\n    const wrapperClass = `${\n        property.type !== 'object' && property.type !== 'array'\n            ? 'ra-elem-wrapper '\n            : 'ra-elem-instance'\n    }\n        ra-elem-${property.type}     \n        ${property.error ? 'ra-error' : ''}`\n\n    const labelComponent = () => {\n        if (type !== 'array' && type !== 'object') {\n            return (\n                <label className='ra-form-label'>\n                    {property.title || property.path}\n                    {property.isRequired && '*'}\n                </label>\n            )\n        } else {\n            return <h5>{property.title}</h5>\n        }\n    }\n\n    return (\n        <span className={wrapperClass}>\n            {labelComponent()}\n            {children}\n            {property.error && (\n                <span className='ra-elem-error-text'>\n                    {property.error[0].keyword}\n                </span>\n            )}\n        </span>\n    )\n}\n","import React from 'react'\n\nimport TextElement from './components/text-element'\nimport NumericElement from './components/numeric-element'\nimport SelectElement from './components/select-element'\nimport CheckboxElement from './components/checkbox-element'\nimport FormContainer from './components/form-container'\n\nimport ElementWrapper from './element-wrapper'\n\nexport default class ComponentRegistry {\n    constructor(customRegistry = {}, wrapper = ElementWrapper) {\n        this._registry = {\n            enum: { component: SelectElement, wrapper: wrapper },\n            boolean: { component: CheckboxElement, wrapper: wrapper },\n            number: { component: NumericElement, wrapper: wrapper },\n            integer: { component: NumericElement, wrapper: wrapper },\n            string: { component: TextElement, wrapper: wrapper }\n        }\n\n        Object.entries(customRegistry).forEach((customRegistryRecord) => {\n            Object.assign(\n                this._registry[customRegistryRecord[0]],\n                customRegistryRecord[1]\n            )\n        })\n\n        this.wrapper = wrapper\n    }\n\n    getComponent(property, itemValue, handleChange) {\n        const props = {\n            property,\n            value: itemValue,\n            onChange: handleChange\n        }\n\n        const Component =\n            (this._registry[property.registryKey] &&\n                this._registry[property.registryKey].component) ||\n            FormContainer\n\n        const Wrapper =\n            (this._registry[property.registryKey] &&\n                this._registry[property.registryKey].wrapper) ||\n            this.wrapper\n\n        return (\n            <Wrapper {...props}>\n                <Component {...props} />\n            </Wrapper>\n        )\n    }\n}\n","import React, { Fragment, useState } from 'react'\nimport FormElement from './components/form-element'\nimport UISchema from './ui-schema.ts'\nimport ComponentRegistry from './component-registry'\n\nexport const SchemaForm = ({\n    schema,\n    wrapper,\n    parentChange,\n    data,\n    config,\n    onValid,\n    path = '',\n    errors: parentErrors\n}) => {\n    if (!schema) {\n        throw new Error('schema must be provided to the SchemaForm component')\n    }\n\n    const [obj, setObj] = useState(Object.assign({}, data))\n    const [keys] = useState(Object.keys(schema.properties))\n    const [instance] = useState(new UISchema(schema))\n    const [registry] = useState(\n        new ComponentRegistry(config && config.registry, wrapper)\n    )\n    const [errors, setErrors] = useState([])\n\n    const handleParentChange = (key) => (value, childPath) => {\n        const newValue = Object.assign({}, obj, { [key]: value })\n        setObj(newValue)\n\n        if (parentChange) {\n            parentChange(newValue, childPath)\n        } else {\n            setErrors(errors.filter((item) => item.dataPath !== childPath))\n        }\n    }\n\n    const handleSubmit = (data) => {\n        const result = instance.validate(obj)\n        const errors = result ? [] : instance.validator.errors\n        errors.forEach((err) => {\n            if (err.params && err.params.missingProperty) {\n                err.dataPath += `.${err.params.missingProperty}`\n            }\n        })\n        setErrors(errors)\n\n        if (result) {\n            onValid(obj)\n        }\n    }\n\n    const getErrors = (path) => {\n        const errArr = [...errors, ...(parentErrors || [])]\n        let result = errArr.filter((err) => err.dataPath === path)\n\n        if (result && result.length === 0) {\n            result = false\n        }\n\n        return result\n    }\n\n    return (\n        <Fragment>\n            {keys.map((key) => {\n                const childPath = `${path}.${key}`\n                const prop = schema.properties[key]\n                return (\n                    <FormElement\n                        key={key}\n                        error={getErrors(childPath)}\n                        errors={parentErrors || errors}\n                        value={obj ? obj[key] : undefined}\n                        property={prop}\n                        path={childPath}\n                        root={schema}\n                        handleParentChange={handleParentChange(key)}\n                        registry={registry}\n                    />\n                )\n            })}\n            {!parentChange && <button onClick={handleSubmit}>Submit</button>}\n        </Fragment>\n    )\n}\n","import React from 'react'\nimport schema from './basic-schema.json'\nimport { SchemaForm } from '@ascentcore/react-schema-form'\n\nexport default function BasicSchemaExample() {\n\n    function onValid(data) {\n        console.log(data)\n    }\n\n    const data = {\n        firstName: 'test'\n    }\n\n    return (<SchemaForm schema={schema} onValid={onValid} data={data} />)\n\n}","export default \"import React from 'react'\\nimport schema from './basic-schema.json'\\nimport { SchemaForm } from '@ascentcore/react-schema-form'\\n\\nexport default function BasicSchemaExample() {\\n\\n    function onValid(data) {\\n        console.log(data)\\n    }\\n\\n    const data = {\\n        firstName: 'test'\\n    }\\n\\n    return (<SchemaForm schema={schema} onValid={onValid} data={data} />)\\n\\n}\";","import React from 'react'\nimport schema from './nested-schema.json'\nimport { SchemaForm } from '@ascentcore/react-schema-form'\n\nexport default function NestedSchemaExample() {\n\n    function onValid(data) {\n        console.log(data)\n    }\n\n    const data = {\n        field: {\n            name: 'field'\n        },\n        fields: [\n            { name: 'item1' },\n            { name: 'item2' },\n        ]\n    }\n\n    return (<SchemaForm schema={schema} onValid={onValid} data={data} />)\n\n}\n","export default \"import React from 'react'\\nimport schema from './nested-schema.json'\\nimport { SchemaForm } from '@ascentcore/react-schema-form'\\n\\nexport default function NestedSchemaExample() {\\n\\n    function onValid(data) {\\n        console.log(data)\\n    }\\n\\n    const data = {\\n        field: {\\n            name: 'field'\\n        },\\n        fields: [\\n            { name: 'item1' },\\n            { name: 'item2' },\\n        ]\\n    }\\n\\n    return (<SchemaForm schema={schema} onValid={onValid} data={data} />)\\n\\n}\\n\";","import React from 'react'\nimport schema from './custom-wrapper-schema.json'\nimport { SchemaForm } from '@ascentcore/react-schema-form'\n\nfunction CustomWrapper({ property, error, children }) {\n    return (<div className=\"column col-4\">\n        <div><b>{property.title}</b></div>\n        {children}\n        <div style={{ 'color': '#FF0000' }}>{error && error[0].keyword}</div>\n    </div>)\n}\n\nexport default function CustomWrapperExample() {\n\n    function onValid(data) {\n        console.log(data)\n    }\n\n    const data = {\n        firstName: 'test'\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"columns\">\n                <SchemaForm\n                    schema={schema}\n                    onValid={onValid}\n                    wrapper={CustomWrapper}\n                    data={data} />\n            </div>\n        </div>)\n\n}\n","export default \"import React from 'react'\\nimport schema from './custom-wrapper-schema.json'\\nimport { SchemaForm } from '@ascentcore/react-schema-form'\\n\\nfunction CustomWrapper({ property, error, children }) {\\n    return (<div className=\\\"column col-4\\\">\\n        <div><b>{property.title}</b></div>\\n        {children}\\n        <div style={{ 'color': '#FF0000' }}>{error && error[0].keyword}</div>\\n    </div>)\\n}\\n\\nexport default function CustomWrapperExample() {\\n\\n    function onValid(data) {\\n        console.log(data)\\n    }\\n\\n    const data = {\\n        firstName: 'test'\\n    }\\n\\n    return (\\n        <div className=\\\"container\\\">\\n            <div className=\\\"columns\\\">\\n                <SchemaForm\\n                    schema={schema}\\n                    onValid={onValid}\\n                    wrapper={CustomWrapper}\\n                    data={data} />\\n            </div>\\n        </div>)\\n\\n}\\n\";","import React from 'react'\nimport schema from './custom-registry-schema.json'\nimport { SchemaForm } from '@ascentcore/react-schema-form'\nimport { TextField } from '@material-ui/core'\n\nfunction CustomWrapper({ children }) {\n    return <div className='column col-4'>{children}</div>\n}\n\nfunction CustomTextField({ property, value, onChange }) {\n    return (\n        <TextField\n            value={value}\n            onChange={onChange}\n            error={!!property.error}\n            label={property.title}\n            helperText={property.error ? property.error[0].keyword : ' '}\n            required={property.isRequired}\n        />\n    )\n}\n\nexport default function CustomRegistryExample() {\n    function onValid(data) {\n        console.log(data)\n    }\n\n    const data = {\n        firstName: 'test'\n    }\n\n    const customRegistry = {\n        string: { component: CustomTextField, wrapper: CustomWrapper }\n    }\n\n    return (\n        <SchemaForm\n            schema={schema}\n            onValid={onValid}\n            data={data}\n            config={{ registry: customRegistry }}\n        />\n    )\n}\n","export default \"import React from 'react'\\nimport schema from './custom-registry-schema.json'\\nimport { SchemaForm } from '@ascentcore/react-schema-form'\\nimport { TextField } from '@material-ui/core'\\n\\nfunction CustomWrapper({ children }) {\\n    return <div className='column col-4'>{children}</div>\\n}\\n\\nfunction CustomTextField({ property, value, onChange }) {\\n    return (\\n        <TextField\\n            value={value}\\n            onChange={onChange}\\n            error={!!property.error}\\n            label={property.title}\\n            helperText={property.error ? property.error[0].keyword : ' '}\\n            required={property.isRequired}\\n        />\\n    )\\n}\\n\\nexport default function CustomRegistryExample() {\\n    function onValid(data) {\\n        console.log(data)\\n    }\\n\\n    const data = {\\n        firstName: 'test'\\n    }\\n\\n    const customRegistry = {\\n        string: { component: CustomTextField, wrapper: CustomWrapper }\\n    }\\n\\n    return (\\n        <SchemaForm\\n            schema={schema}\\n            onValid={onValid}\\n            data={data}\\n            config={{ registry: customRegistry }}\\n        />\\n    )\\n}\\n\";","/* eslint-disable import/no-webpack-loader-syntax */\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport './css/spectre.min.css'\nimport './css/spectre-icons.min.css'\n\nimport React, { useState } from 'react'\nimport ReactJson from 'react-json-view'\n\nimport BasicSchemaExample from './basic-schema'\nimport BasicSchemaExampleJSON from './basic-schema/basic-schema.json'\nimport BasicSchemaExampleCode from '!!raw-loader!./basic-schema/index.js';\n\nimport NestedSchemaExample from './nested-schema'\nimport NestedSchemaExampleJSON from './nested-schema/nested-schema.json'\nimport NestedSchemaExampleCode from '!!raw-loader!./nested-schema/index.js';\n\nimport CustomWrapperExample from './custom-wrapper'\nimport CustomWrapperExampleJSON from './custom-wrapper/custom-wrapper-schema.json'\nimport CustomWrapperExampleCode from '!!raw-loader!./custom-wrapper/index.js';\n\nimport CustomRegistryExample from './custom-registry'\nimport CustomRegistryExampleJSON from './custom-registry/custom-registry-schema.json'\nimport CustomRegistryExampleCode from '!!raw-loader!./custom-registry/index.js';\n\nconst App = () => {\n\n  const [selected, setSelected] = useState(parseInt(window.location.hash.substr(1)) || 0)\n  const tabs = [\n    {\n      title: 'Basic Example',\n      component: <BasicSchemaExample />,\n      code: BasicSchemaExampleCode,\n      schema: BasicSchemaExampleJSON\n    },\n    {\n      title: 'Nested Schema',\n      component: <NestedSchemaExample />,\n      code: NestedSchemaExampleCode,\n      schema: NestedSchemaExampleJSON\n    },\n    {\n      title: 'Custom Wrapper',\n      component: <CustomWrapperExample />,\n      code: CustomWrapperExampleCode,\n      schema: CustomWrapperExampleJSON\n    },\n    {\n      title: 'Custom Registry',\n      component: <CustomRegistryExample />,\n      code: CustomRegistryExampleCode,\n      schema: CustomRegistryExampleJSON\n    }\n  ]\n\n  const handleTabChange = (idx) => () => {\n    setSelected(idx)\n\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"columns\">\n        <div className=\"column col-3\">\n          <ul className=\"nav\">\n            {tabs.map((tab, index) => <li key={index} className={`nav-item ${index === selected ? 'active' : ''}`} onClick={handleTabChange(index)}>\n              <a href={`#${index}`}>{tab.title}</a>\n            </li>)}\n          </ul >\n        </div>\n        <div className=\"column col-9\">\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <div className=\"card-title h5\">{tabs[selected].title}</div>\n              <div className=\"card-subtitle text-gray\">Generated Form</div>\n            </div>\n            <div className=\"card-body\">\n              {tabs[selected].component}\n            </div>\n          </div>\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <h4>Code</h4>\n              <pre className=\"code\" data-lang=\"JS\">\n                <code>\n                  {tabs[selected].code}\n                </code>\n              </pre>\n              <h4>Schema</h4>\n              <ReactJson src={tabs[selected].schema} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}